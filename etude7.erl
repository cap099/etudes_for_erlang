-module(etude7).

-export([derivative/2, make_list/0, get_people/0, get_people_or/0, mean/1, standard_dev/1, julian/1, make_deck/0, show_deck/1, shuffle/1]).


%%%%%%%%%%  Etude 7-1  %%%%%%%%%%

%%  Function that approximates the derivative of an input function

-spec(derivative(function(), number()) -> number()).

derivative(F, X) ->
    D = 1.0e-10,
    (F(X + 1.0e-10) - F(X))/D.



%%%%%%%%%%  Etude 7-2  %%%%%%%%%%

%% Functions that show the use of a list comprehension

%% Generate a list to comprehend

-spec(make_list() -> list()).

make_list() ->
    [{"Federico", $M, 22}, {"Kim", $F, 45}, {"Hansa", $F, 30},
{"Tran", $M, 47}, {"Cathy", $F, 32}, {"Elias", $M, 50}].

%% Parse the list with guards

-spec(get_people() -> list()).

get_people() ->
    People = make_list(),
    [Name || {Name, Gender, Age} <- People, Gender == $M, Age > 40 ].

%% Parse the list with guards that are "ORed"

-spec(get_people_or() -> list()).

get_people_or() ->
    People = make_list(),
    [Name || {Name, Gender, Age} <- People, (Gender == $M) or (Age > 40)].



%%%%%%%%%%  Etude 7-3  %%%%%%%%%%


%% Find the mean of a list

-spec(mean(list()) -> number()).

mean(List) ->
    lists:foldl(fun(X,Acc)-> X + Acc end, 0, List) / length(List).

%% Find the standard deviation of a list

-spec(standard_dev(list()) -> number()).

standard_dev(List) ->
    Squares = [X * X || X <- List],
    Sum = lists:foldl(fun(X, Acc) -> X + Acc end, 0, List),
    SumSquares = lists:foldl(fun(X, Acc) -> X + Acc end, 0, Squares),
    N = length(List),
    math:sqrt(((N * SumSquares) - Sum * Sum)/(N*(N-1))).


%%%%%%%%%%  Etude 7-4  %%%%%%%%%%

-spec(julian(string()) -> integer()).

julian(Date) ->
    DaysPerMonth = [31,28,31,30,31,30,31,31,30,31,30,31],
    DateList = etude5:date_parts(Date),
    julian(lists:nth(1,DateList), lists:nth(2,DateList), 
                    lists:nth(3,DateList), DaysPerMonth).


%% Helper function to sum days passed in each month

-spec(julian(integer(), integer(), integer(), list()) -> integer()).

julian(Year, Month, Day, DaysPerMonth) ->
    {MonthsPassed, _} = lists:split(Month-1, DaysPerMonth),
    Sum = lists:foldl(fun(X, Acc) -> X + Acc end, 0, MonthsPassed) + Day,

    case Month > 2 of
        true -> Total = julian_helper(Sum, Year);
        false -> Total = Sum
    end,
    Total.

%% Helper to add a day if Year is a leap year

-spec(julian_helper(number(), number()) -> number()).

julian_helper(Sum, Year) ->
    case is_leap_year(Year) of
        true -> Total = Sum + 1;
        false -> Total = Sum
    end,
    Total.


%% Returns boolean notating if a given year is a leap year

-spec(is_leap_year(integer()) -> boolean()).

is_leap_year(Year) ->
    (Year rem 4 == 0 andalso Year rem 100 /= 0)
    orelse (Year rem 400 == 0).


%%%%%%%%%%  Etude 7-5  %%%%%%%%%%

%% A function that generates tuples that represent a deck of standard playing cards

-spec(make_deck() -> list()).

make_deck() ->
    Suits = ["Clubs", "Spades", "Diamonds", "Hearts"],
    Cards = ["A", 1,2,3,4,5,6,7,8,9,10, "J", "Q", "K"],

    [{Card, Suit} || Card <- Cards, Suit <- Suits].

%%Function given by book to show entire deck

show_deck(Deck) ->
    lists:foreach(fun(Item) -> io:format("~p~n", [Item]) end, Deck).


%%%%%%%%%%  Etude 7-6  %%%%%%%%%%

%% Write Documentation for the given function:

%% Shuffle is a function that takes a list of tuples generated by make_deck/0 and randomizes the order of the tuples

-spec(shuffle(list()) -> list()).

shuffle(List) -> shuffle(List, []).  %% Move to helper function

shuffle([], Acc) -> Acc;  %% Base case of an empty list: just return the Accumulated result

shuffle(List, Acc) ->   %% if the list is not empty: 
    {Leading, [H | T]} = lists:split(rand:uniform(length(List)) - 1, List),  %% Select a random card from the deck and add it to Acc 
    shuffle(Leading ++ T, [H | Acc]).    %% remove the selected card from the 'deck' recursive call on the rest of the deck.
                                         %% when the 'deck' is empty recursion stops.
